
Общие принципы описания операторных методов

- Operator metod — это специальный метод, который позволяет переопределить поведение оператора для пользовательских типов (классов или структур).
- Имя метода оператора определяется символом оператора, например, operator+ или operator==.
- Метод оператора обычно статический (static) (в зависимости от языка).
- Обычно метод оператора принимает два операнда (например, для сложения), но некоторые операторы принимают один операнд (например, инкремент ++).
- Метод возвращает значение, соответствующее результату операции (например, новый объект или примитивный тип).

Перегрузка арифметических операторов

- Распространенные операторы: +, -, *, /, %, ++, --.
- Пример перегрузки оператора + для класса Vector:

  class Vector {
  public:
      int x, y;
      Vector(int x, int y) : x(x), y(y) {}

      Vector operator+(const Vector& v) const {
          return Vector(x + v.x, y + v.y);
      }
  };

- Операторы должны логично соответствовать своей функции.
- Оператор должен принимать нужное количество аргументов.
- Возвращаемое значение обычно новый объект или значение.

Особенности перегрузки операторов сравнения

- Основные операторы сравнения: ==, !=, <, >, <=, >=.
- Рекомендуется перегружать пары операторов (например, если перегрузили ==, нужно перегрузить !=).
- Операторы возвращают булево значение (true или false).
- Пример перегрузки операторов == и !=:

  class MyClass {
  public:
      int value;

      bool operator==(const MyClass& other) const {
          return value == other.value;
      }

      bool operator!=(const MyClass& other) const {
          return !(*this == other);
      }
  };

Перегрузка логических операторов

- Логические операторы: &&, ||, !.
- В C++ перегрузка && и || может привести к потере короткого замыкания (short-circuit evaluation).
- Обычно перегружают &, | вместо &&, ||.
- Оператор ! принимает один операнд.
- Пример перегрузки оператора !:

  class BoolWrapper {
      bool value;
  public:
      BoolWrapper(bool v) : value(v) {}

      BoolWrapper operator!() const {
          return BoolWrapper(!value);
      }
  };

Правила перегрузки операторов приведения типа

- Позволяет определить, как объект класса преобразуется в другой тип.
- В C++ синтаксис:

  class MyClass {
      int value;
  public:
      MyClass(int v) : value(v) {}

      operator int() const {
          return value;
      }
  };

- В C# можно определить explicit и implicit преобразования:

  public class MyClass {
      public int Value;

      public static explicit operator int(MyClass c) {
          return c.Value;
      }

      public static implicit operator MyClass(int v) {
          return new MyClass { Value = v };
      }
  }

- explicit требует явного приведения типа (например, (int)obj).
- implicit позволяет неявное преобразование.

Заключение

Перегрузка операторов позволяет задать новые значения и поведение операторов для пользовательских типов, что делает код более читаемым и удобным. Например, вместо метода Add() для сложения векторов можно использовать оператор +.
